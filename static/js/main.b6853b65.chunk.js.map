{"version":3,"sources":["context/email/emailContext.js","context/email/emailReducer.js","context/types.js","context/email/EmailState.js","Components/MailboxList/SendModel.js","Components/MailboxList/MailboxList.js","Components/Helper.js","Components/EmailList/EmailRow.js","Components/EmailList/SearchBar.js","Components/EmailList/EmailList.js","Components/Email/ReplyModel.js","Components/Email/ForwardModel.js","Components/Email/Email.js","App.js","index.js","Components/Email/empty_email.svg"],"names":["emailContext","createContext","state","action","type","messages","payload","loading","message","currentLabel","nextPageToken","hasMoreMessages","EmailState","props","useReducer","EmailReducer","isAuthorize","dispatch","getMessagesData","resp","result","forEach","window","gapi","client","gmail","users","get","userId","id","execute","setNextPageToken","token","setHasMoreMessages","bool","clearMessages","setLoading","Provider","value","getMessages","labelIds","request","list","maxResults","getMessagesQuery","query","q","getOneMessage","messageId","console","log","setCurrentLabel","labelId","loadMoreMessages","pageToken","children","SendModel","useDisclosure","isOpen","onOpen","onClose","toast","useToast","sendMessage","headers_obj","callback","email","header","base64EncodedEmail","Base64","encodeURI","send","resource","raw","displayToast","indexOf","title","description","status","duration","isClosable","Button","w","h","leftIcon","BsPlusCircle","borderRadius","variant","variantColor","onClick","Modal","size","closeOnOverlayClick","onSubmit","e","preventDefault","form","target","emailTo","elements","subject","To","Subject","FormControl","isRequired","Input","placeholder","aria-describedby","Textarea","minH","resize","mr","MailboxList","useContext","EmailContext","useState","active","setActive","handleClick","categoryId","Box","bg","border","borderColor","borderTopLeftRadius","borderBottomLeftRadius","List","p","py","pl","MdInbox","justifyContent","MdStar","MdLabel","FiSend","FiFile","MdPeople","MdLoyalty","getHeader","headers","name","find","undefined","removeQuote","str","replace","EmailRow","handleMessageClick","split","msg","html","txt","document","createElement","innerHTML","decodeHtml","snippet","substr","backgroundColor","Flex","key","wrap","justify","borderTop","borderBottom","cursor","Avatar","src","Text","fontSize","color","isTruncated","fontWeight","prototype","PropTypes","object","func","SearchBar","setQuery","handleQuery","keyCode","InputGroup","IconButton","icon","marginLeft","aria-label","isLoading","borderWidth","focusBorderColor","onChange","onKeyDown","Messages","currentTarget","getAttribute","overflowY","dataLength","length","next","hasMore","loader","scrollableTarget","map","index","CustomSpinner","mt","display","align","Spinner","thickness","speed","emptyColor","EmailList","direction","ReplyModel","replayData","rightIcon","MdReplay","replayMsgId","msgId","readOnly","to","ForwardModel","forwardData","getMessageBody","handleForwardMsg","forwardTo","body","MdArrowForward","getForwardHead","Email","React","useEffect","addToFrame","getElementById","contentWindow","encodedBody","parts","data","getHTMLPart","decode","arr","x","mimeType","borderTopRightRadius","borderBottomRightRadius","mb","replayTo","replaySubject","formatReplayData","MdArchive","ids","batchModify","removeLabelIds","then","catch","error","trash","className","flexGrow","strDate","date","Date","Intl","DateTimeFormat","year","month","day","hour","minute","hour12","format","formatDate","AspectRatioBox","ratio","as","EmptyMail","flexDirection","alignItems","style","height","emptyEmailImg","alt","width","Heading","SignIn","handleAuthClick","FcGoogle","Main","App","setIsAuthorize","a","load","setApiKey","process","auth","authorize","client_id","scope","immediate","handleAuthResult","onerror","timeout","ontimeout","authResult","loadClient","res","err","ThemeProvider","CSSReset","ReactDOM","render","module","exports"],"mappings":"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","file":"static/js/main.b6853b65.chunk.js","sourcesContent":["import { createContext } from \"react\";\r\n\r\nconst emailContext = createContext();\r\n\r\nexport default emailContext;\r\n","import {\r\n  SET_MESSAGE,\r\n  SET_MESSAGES,\r\n  CLEAR_MESSAGES,\r\n  SET_LOADING,\r\n  SET_CURRENT_LABEL,\r\n  SET_NEXT_PAGE_TOKEN,\r\n  SET_HAS_MORE_MESSAGES,\r\n} from \"../types\";\r\n\r\nexport default (state, action) => {\r\n  switch (action.type) {\r\n    case SET_MESSAGES:\r\n      return {\r\n        ...state,\r\n        messages: [...state.messages, action.payload],\r\n        loading: false,\r\n      };\r\n\r\n    case SET_MESSAGE:\r\n      return {\r\n        ...state,\r\n        message: action.payload,\r\n      };\r\n\r\n    case SET_CURRENT_LABEL:\r\n      return {\r\n        ...state,\r\n        currentLabel: action.payload,\r\n      };\r\n\r\n    case SET_NEXT_PAGE_TOKEN: {\r\n      return {\r\n        ...state,\r\n        nextPageToken: action.payload,\r\n      };\r\n    }\r\n\r\n    case SET_HAS_MORE_MESSAGES: {\r\n      return {\r\n        ...state,\r\n        hasMoreMessages: action.payload,\r\n      };\r\n    }\r\n\r\n    case CLEAR_MESSAGES: {\r\n      return {\r\n        ...state,\r\n        messages: [],\r\n      };\r\n    }\r\n\r\n    case SET_LOADING:\r\n      return {\r\n        ...state,\r\n        loading: true,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","// Email Context Variables\r\nexport const SET_MESSAGE = \"SET_MESSAGE\";\r\nexport const GET_MESSAGE = \"GET_MESSAGE\";\r\nexport const SET_MESSAGES = \"SET_MESSAGES\";\r\nexport const GET_MESSAGES = \"GET_MESSAGES\";\r\nexport const CLEAR_MESSAGES = \"CLEAR_MESSAGES\";\r\nexport const SET_LOADING = \"SET_LOADING\";\r\nexport const SET_CURRENT_LABEL = \"SET_CURRENT_LABEL\";\r\nexport const GET_CURRENT_LABEL = \"GET_CURRENT_LABEL\";\r\nexport const SET_NEXT_PAGE_TOKEN = \"SET_NEXT_PAGE_TOKEN\";\r\nexport const SET_HAS_MORE_MESSAGES = \"SET_HAS_MORE_MESSAGES\";\r\n\r\n// Authentication Context Variables\r\nexport const SET_IS_AUTHORIZE = \"SET_IS_AUTHORIZE\";\r\n","import React, { useReducer } from \"react\";\r\nimport EmailContext from \"./emailContext\";\r\nimport EmailReducer from \"./emailReducer\";\r\nimport {\r\n  SET_MESSAGE,\r\n  SET_MESSAGES,\r\n  CLEAR_MESSAGES,\r\n  SET_LOADING,\r\n  SET_CURRENT_LABEL,\r\n  SET_NEXT_PAGE_TOKEN,\r\n  SET_HAS_MORE_MESSAGES,\r\n} from \"../types\";\r\n\r\nconst EmailState = (props) => {\r\n  const initialState = {\r\n    messages: [],\r\n    message: null,\r\n    currentLabel: \"INBOX\",\r\n    nextPageToken: \"\",\r\n    hasMoreMessages: true,\r\n    isAuthorize: false,\r\n    loading: false,\r\n  };\r\n\r\n  const [state, dispatch] = useReducer(EmailReducer, initialState);\r\n\r\n  // Send reques to get IDs of 20 Messages and call getMessagesData(Ids)\r\n  const getMessages = (labelIds = state.currentLabel) => {\r\n    // Set Loading to true\r\n    setLoading();\r\n\r\n    // Empty previous messages\r\n    clearMessages();\r\n\r\n    const request = window.gapi.client.gmail.users.messages.list({\r\n      userId: \"me\",\r\n      labelIds: labelIds,\r\n      maxResults: 20,\r\n    });\r\n\r\n    request.execute((resp) => {\r\n      // Set NextPageToken\r\n      if (resp.result.nextPageToken) {\r\n        setNextPageToken(resp.result.nextPageToken);\r\n        setHasMoreMessages(true);\r\n      } else {\r\n        setNextPageToken(\"\");\r\n        setHasMoreMessages(false);\r\n      }\r\n\r\n      // Send Id list to getMessagesData to get Message Data foreach Id\r\n      getMessagesData(resp);\r\n    });\r\n  };\r\n\r\n  const getMessagesQuery = (query) => {\r\n    // Set Loading to true\r\n    setLoading();\r\n\r\n    // Empty previous messages\r\n    clearMessages();\r\n\r\n    // Get List of 20 message's Id\r\n    const request = window.gapi.client.gmail.users.messages.list({\r\n      userId: \"me\",\r\n      q: query,\r\n    });\r\n\r\n    // Send Id list to getMessagesData to get Message Data foreach Id\r\n    request.execute(getMessagesData);\r\n  };\r\n\r\n  // Send Request to get data of each message\r\n  const getMessagesData = (resp) => {\r\n    const messages = resp.result.messages ? resp.result.messages : [];\r\n\r\n    // Get Data for each message\r\n    messages.forEach((message) => {\r\n      const request = window.gapi.client.gmail.users.messages.get({\r\n        userId: \"me\",\r\n        id: message.id,\r\n      });\r\n\r\n      request.execute((resp) => {\r\n        dispatch({\r\n          type: SET_MESSAGES,\r\n          payload: resp.result,\r\n        });\r\n      });\r\n    });\r\n  };\r\n\r\n  // Get Message\r\n  const getOneMessage = (messageId) => {\r\n    const request = window.gapi.client.gmail.users.messages.get({\r\n      userId: \"me\",\r\n      id: messageId,\r\n    });\r\n\r\n    request.execute((resp) => {\r\n      console.log(resp);\r\n      dispatch({\r\n        type: SET_MESSAGE,\r\n        payload: resp.result,\r\n      });\r\n    });\r\n  };\r\n\r\n  // Load More Messages\r\n  const loadMoreMessages = (labelIds = state.currentLabel) => {\r\n    const request = window.gapi.client.gmail.users.messages.list({\r\n      userId: \"me\",\r\n      labelIds: labelIds,\r\n      maxResults: 20,\r\n      pageToken: state.nextPageToken,\r\n    });\r\n\r\n    request.execute((resp) => {\r\n      if (resp.result.nextPageToken) {\r\n        setNextPageToken(resp.result.nextPageToken);\r\n        setHasMoreMessages(true);\r\n      } else {\r\n        setNextPageToken(\"\");\r\n        setHasMoreMessages(false);\r\n      }\r\n\r\n      getMessagesData(resp);\r\n    });\r\n  };\r\n\r\n  // Set Next Page Token\r\n  const setNextPageToken = (token) =>\r\n    dispatch({ type: SET_NEXT_PAGE_TOKEN, payload: token });\r\n\r\n  // Set Has More Messages\r\n  const setHasMoreMessages = (bool) =>\r\n    dispatch({ type: SET_HAS_MORE_MESSAGES, payload: bool });\r\n\r\n  // Set Current Label\r\n  const setCurrentLabel = (labelId) =>\r\n    dispatch({ type: SET_CURRENT_LABEL, payload: labelId });\r\n\r\n  // Clear Messages\r\n  const clearMessages = () => dispatch({ type: CLEAR_MESSAGES });\r\n\r\n  // Set Loading\r\n  const setLoading = () => dispatch({ type: SET_LOADING });\r\n\r\n  return (\r\n    <EmailContext.Provider\r\n      value={{\r\n        messages: state.messages,\r\n        message: state.message,\r\n        currentLabel: state.currentLabel,\r\n        nextPageToken: state.nextPageToken,\r\n        hasMoreMessages: state.hasMoreMessages,\r\n        loading: state.loading,\r\n        getMessages,\r\n        getMessagesQuery,\r\n        getOneMessage,\r\n        setCurrentLabel,\r\n        loadMoreMessages,\r\n        setLoading,\r\n      }}\r\n    >\r\n      {props.children}\r\n    </EmailContext.Provider>\r\n  );\r\n};\r\n\r\nexport default EmailState;\r\n","import React, { Fragment } from \"react\";\r\nimport { Base64 } from \"js-base64\";\r\nimport { BsPlusCircle } from \"react-icons/bs\";\r\nimport {\r\n  Button,\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Input,\r\n  FormControl,\r\n  Textarea,\r\n  useToast,\r\n  useDisclosure,\r\n} from \"@chakra-ui/core\";\r\n\r\nconst SendModel = () => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const toast = useToast();\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const form = e.target;\r\n    const emailTo = form.elements[\"emailTo\"].value;\r\n    const subject = form.elements[\"subject\"].value;\r\n    const message = form.elements[\"message\"].value;\r\n\r\n    // Send Simple Mail && Display Toast\r\n    sendMessage(\r\n      {\r\n        To: emailTo,\r\n        Subject: subject,\r\n      },\r\n      message,\r\n      displayToast\r\n    );\r\n\r\n    onClose();\r\n  };\r\n\r\n  const sendMessage = (headers_obj, message, callback) => {\r\n    let email = \"\";\r\n\r\n    for (var header in headers_obj)\r\n      email += header += \": \" + headers_obj[header] + \"\\r\\n\";\r\n\r\n    email += \"\\r\\n\" + message;\r\n\r\n    const base64EncodedEmail = Base64.encodeURI(email);\r\n    const request = window.gapi.client.gmail.users.messages.send({\r\n      userId: \"me\",\r\n      resource: {\r\n        raw: base64EncodedEmail,\r\n      },\r\n    });\r\n    request.execute(callback);\r\n  };\r\n\r\n  const displayToast = ({ result }) => {\r\n    if (result.labelIds.indexOf(\"SENT\") !== -1) {\r\n      toast({\r\n        title: \"Message Sent.\",\r\n        description: \"We've Sent your email.\",\r\n        status: \"success\",\r\n        duration: 9000,\r\n        isClosable: true,\r\n      });\r\n    } else {\r\n      toast({\r\n        title: \"An error occurred.\",\r\n        description: \"Unable to sent your email.\",\r\n        status: \"error\",\r\n        duration: 9000,\r\n        isClosable: true,\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <Button\r\n        w='100%'\r\n        h='48px'\r\n        leftIcon={BsPlusCircle}\r\n        borderRadius='20px'\r\n        variant='solid'\r\n        variantColor='blue'\r\n        onClick={onOpen}\r\n      >\r\n        New Message\r\n      </Button>\r\n      <Modal\r\n        isOpen={isOpen}\r\n        size='xl'\r\n        onClose={onClose}\r\n        closeOnOverlayClick={false}\r\n      >\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader>New Message</ModalHeader>\r\n          <ModalCloseButton />\r\n          <form id='form' onSubmit={handleSubmit}>\r\n            <ModalBody>\r\n              <FormControl isRequired>\r\n                <Input\r\n                  type='email'\r\n                  id='emailTo'\r\n                  placeholder='To'\r\n                  aria-describedby='email-helper-text'\r\n                />\r\n              </FormControl>\r\n              <FormControl isRequired>\r\n                <Input\r\n                  type='text'\r\n                  id='subject'\r\n                  placeholder='Subject'\r\n                  aria-describedby='subject-email-helper-text'\r\n                />\r\n              </FormControl>\r\n              <FormControl isRequired>\r\n                <Textarea\r\n                  id='message'\r\n                  minH='280px'\r\n                  size='xl'\r\n                  resize='vertical'\r\n                />\r\n              </FormControl>\r\n            </ModalBody>\r\n\r\n            <ModalFooter>\r\n              <Button type='reset' variantColor='blue' mr={3} onClick={onClose}>\r\n                Close\r\n              </Button>\r\n              <Button type='submit' variantColor='green'>\r\n                Send\r\n              </Button>\r\n            </ModalFooter>\r\n          </form>\r\n        </ModalContent>\r\n      </Modal>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default SendModel;\r\n","import React, { useState, useContext } from \"react\";\r\nimport EmailContext from \"../../context/email/emailContext\";\r\nimport SendModel from \"./SendModel\";\r\n\r\n// Import Icons\r\nimport { Button, Box, List, ListItem } from \"@chakra-ui/core\";\r\nimport { MdLabel, MdStar, MdPeople, MdLoyalty, MdInbox } from \"react-icons/md\";\r\nimport { FiSend, FiFile } from \"react-icons/fi\";\r\n\r\nconst MailboxList = () => {\r\n  const { getMessages, setCurrentLabel } = useContext(EmailContext);\r\n  const [active, setActive] = useState(\"INBOX\");\r\n\r\n  const handleClick = (e) => {\r\n    const categoryId = e.target.id;\r\n    setActive(categoryId);\r\n    setCurrentLabel(categoryId);\r\n\r\n    // Get Messages using clicked category\r\n    getMessages(categoryId);\r\n  };\r\n\r\n  return (\r\n    <Box\r\n      w='16%'\r\n      h='100%'\r\n      bg='white'\r\n      border='1px'\r\n      borderColor='gray.200'\r\n      borderTopLeftRadius='md'\r\n      borderBottomLeftRadius='md'\r\n    >\r\n      <List>\r\n        {/* Send Model */}\r\n        <ListItem p='0.5rem 1rem 1rem'>\r\n          <SendModel />\r\n        </ListItem>\r\n\r\n        {/* Labels Buttons */}\r\n        <ListItem>\r\n          <Button\r\n            id='INBOX'\r\n            w='100%'\r\n            h='45px'\r\n            py={2}\r\n            pl={8}\r\n            leftIcon={MdInbox}\r\n            variantColor='blue'\r\n            variant={active === \"INBOX\" ? \"solid\" : \"ghost\"}\r\n            justifyContent='flex-start'\r\n            onClick={handleClick}\r\n          >\r\n            Inbox\r\n          </Button>\r\n        </ListItem>\r\n        <ListItem>\r\n          <Button\r\n            id='STARRED'\r\n            w='100%'\r\n            h='45px'\r\n            py={2}\r\n            pl={8}\r\n            leftIcon={MdStar}\r\n            variantColor='blue'\r\n            variant={active === \"STARRED\" ? \"solid\" : \"ghost\"}\r\n            justifyContent='flex-start'\r\n            onClick={handleClick}\r\n          >\r\n            Starred\r\n          </Button>\r\n        </ListItem>\r\n        <ListItem>\r\n          <Button\r\n            id='IMPORTANT'\r\n            w='100%'\r\n            h='45px'\r\n            py={2}\r\n            pl={8}\r\n            leftIcon={MdLabel}\r\n            variantColor='blue'\r\n            variant={active === \"IMPORTANT\" ? \"solid\" : \"ghost\"}\r\n            justifyContent='flex-start'\r\n            onClick={handleClick}\r\n          >\r\n            Important\r\n          </Button>\r\n        </ListItem>\r\n        <ListItem>\r\n          <Button\r\n            id='SENT'\r\n            w='100%'\r\n            h='45px'\r\n            py={2}\r\n            pl={8}\r\n            leftIcon={FiSend}\r\n            variantColor='blue'\r\n            variant={active === \"SENT\" ? \"solid\" : \"ghost\"}\r\n            justifyContent='flex-start'\r\n            onClick={handleClick}\r\n          >\r\n            Sent\r\n          </Button>\r\n        </ListItem>\r\n        <ListItem>\r\n          <Button\r\n            id='DRAFT'\r\n            w='100%'\r\n            h='45px'\r\n            py={2}\r\n            pl={8}\r\n            leftIcon={FiFile}\r\n            variantColor='blue'\r\n            variant={active === \"DRAFT\" ? \"solid\" : \"ghost\"}\r\n            justifyContent='flex-start'\r\n            onClick={handleClick}\r\n          >\r\n            Drafts\r\n          </Button>\r\n        </ListItem>\r\n        <ListItem>\r\n          <Button\r\n            id='TRASH'\r\n            w='100%'\r\n            h='45px'\r\n            py={2}\r\n            pl={8}\r\n            leftIcon='delete'\r\n            variantColor='blue'\r\n            variant={active === \"TRASH\" ? \"solid\" : \"ghost\"}\r\n            justifyContent='flxex-start'\r\n            onClick={handleClick}\r\n          >\r\n            Trash\r\n          </Button>\r\n        </ListItem>\r\n        <ListItem>\r\n          <Button\r\n            id='CATEGORY_SOCIAL'\r\n            w='100%'\r\n            h='45px'\r\n            py={2}\r\n            pl={8}\r\n            leftIcon={MdPeople}\r\n            variantColor='blue'\r\n            variant={active === \"CATEGORY_SOCIAL\" ? \"solid\" : \"ghost\"}\r\n            justifyContent='flxex-start'\r\n            onClick={handleClick}\r\n          >\r\n            Social\r\n          </Button>\r\n        </ListItem>\r\n        <ListItem>\r\n          <Button\r\n            id='CATEGORY_PROMOTIONS'\r\n            w='100%'\r\n            h='45px'\r\n            py={2}\r\n            pl={8}\r\n            leftIcon={MdLoyalty}\r\n            variantColor='blue'\r\n            variant={active === \"CATEGORY_PROMOTIONS\" ? \"solid\" : \"ghost\"}\r\n            justifyContent='flxex-start'\r\n            onClick={handleClick}\r\n          >\r\n            Promotions\r\n          </Button>\r\n        </ListItem>\r\n      </List>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default MailboxList;\r\n","export const getHeader = (headers, name) => {\r\n  const header = headers.find((header) => header.name === name);\r\n  return header !== undefined ? header.value : undefined;\r\n};\r\n\r\nexport const isEmpty = (obj) => {\r\n  for (var key in obj) {\r\n    if (obj.hasOwnProperty(key)) return false;\r\n  }\r\n  return true;\r\n};\r\n\r\nexport const decodeHtml = (html) => {\r\n  let txt = document.createElement(\"textarea\");\r\n  txt.innerHTML = html;\r\n  return txt.value;\r\n};\r\n\r\nexport const removeQuote = (str) => {\r\n  return str.replace(/['\"]+/g, \"\");\r\n};\r\n\r\nexport const formatDate = (strDate) => {\r\n  const date = new Date(strDate);\r\n  const options = {\r\n    year: \"numeric\",\r\n    month: \"numeric\",\r\n    day: \"numeric\",\r\n    hour: \"numeric\",\r\n    minute: \"numeric\",\r\n    hour12: true,\r\n  };\r\n  return new Intl.DateTimeFormat(\"en-US\", options).format(date);\r\n};\r\n","import React from \"react\";\r\nimport { getHeader, decodeHtml, removeQuote } from \"../Helper\";\r\nimport { Flex, Box, Avatar, Text } from \"@chakra-ui/core\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst EmailRow = ({ message, handleMessageClick }) => {\r\n  // Get name of email sender\r\n  const name = removeQuote(\r\n    getHeader(message.payload.headers, \"From\").split(\"<\")[0]\r\n  );\r\n\r\n  // Get subject of email\r\n  const subject = getHeader(message.payload.headers, \"Subject\");\r\n\r\n  // Get part of email snippet\r\n  const msg = decodeHtml(message.snippet.substr(0, 75));\r\n\r\n  // Set backgroundColor to white if the mail is not yet opened\r\n  const backgroundColor =\r\n    message.labelIds.indexOf(\"UNREAD\") > -1 ? \"#fff\" : \"#E2E8F0\";\r\n\r\n  return (\r\n    <Flex\r\n      key={message.id}\r\n      id={message.id}\r\n      onClick={handleMessageClick}\r\n      wrap='no-wrap'\r\n      justify='space-around'\r\n      py={2}\r\n      bg={backgroundColor}\r\n      borderTop='1px'\r\n      borderBottom='1px'\r\n      borderColor='gray.300'\r\n      cursor='pointer'\r\n    >\r\n      <Avatar name={name} src='https://bit.ly/tioluwani-kolawole' />\r\n      <Box w='80%'>\r\n        <Text fontSize='sm' color='gray.700' isTruncated>\r\n          {name}\r\n        </Text>\r\n        <Text fontSize='md' fontWeight='bold' color='#3182ce' isTruncated>\r\n          {subject}\r\n        </Text>\r\n        <Text fontSize='xs' color='gray.500'>\r\n          {msg}\r\n        </Text>\r\n      </Box>\r\n    </Flex>\r\n  );\r\n};\r\n\r\nexport default EmailRow;\r\n\r\nEmailRow.prototype = {\r\n  message: PropTypes.object.isRequired,\r\n  handleMessageClick: PropTypes.func.isRequired,\r\n};\r\n","import React, { useState, useContext } from \"react\";\r\nimport { Box, Input, InputGroup, IconButton } from \"@chakra-ui/core\";\r\nimport EmailContext from \"../../context/email/emailContext\";\r\n\r\nconst SearchBar = () => {\r\n  const { getMessagesQuery, loading } = useContext(EmailContext);\r\n  const [query, setQuery] = useState(\"\");\r\n\r\n  const handleOnChange = (e) => setQuery(e.target.value);\r\n\r\n  const handleQuery = (e) => {\r\n    if (!query) return;\r\n    if (e.keyCode === 13 || e.type === \"click\") getMessagesQuery(query);\r\n  };\r\n\r\n  return (\r\n    <Box py='5px' bg='white' border='1px' borderColor='gray.200'>\r\n      <InputGroup size='lg'>\r\n        <IconButton\r\n          icon='search'\r\n          variant='ghost'\r\n          variantColor='blue'\r\n          marginLeft='5px'\r\n          aria-label='Search messages'\r\n          onClick={handleQuery}\r\n          isLoading={loading}\r\n        />\r\n        <Input\r\n          type='text'\r\n          placeholder='Search mail'\r\n          borderWidth='0px'\r\n          borderRadius='0px'\r\n          focusBorderColor='white'\r\n          value={query}\r\n          onChange={handleOnChange}\r\n          onKeyDown={handleQuery}\r\n        />\r\n      </InputGroup>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default SearchBar;\r\n","import React, { useContext } from \"react\";\r\nimport EmailContext from \"../../context/email/emailContext\";\r\n\r\nimport EmailRow from \"./EmailRow\";\r\nimport SearchBar from \"./SearchBar\";\r\n\r\nimport InfiniteScroll from \"react-infinite-scroll-component\";\r\nimport { Flex, Box, Spinner } from \"@chakra-ui/core\";\r\n\r\nconst Messages = () => {\r\n  const {\r\n    messages,\r\n    getOneMessage,\r\n    hasMoreMessages,\r\n    loadMoreMessages,\r\n  } = useContext(EmailContext);\r\n\r\n  const handleMessageClick = (e) => {\r\n    const messageId = e.currentTarget.getAttribute(\"id\");\r\n    getOneMessage(messageId);\r\n  };\r\n\r\n  return (\r\n    <Box overflowY='auto' id='scrollableDiv'>\r\n      <InfiniteScroll\r\n        dataLength={messages.length}\r\n        next={loadMoreMessages}\r\n        hasMore={hasMoreMessages}\r\n        loader={<h4>Loading...</h4>}\r\n        scrollableTarget='scrollableDiv'\r\n      >\r\n        {messages.map((message, index) => (\r\n          <EmailRow\r\n            key={index}\r\n            message={message}\r\n            handleMessageClick={handleMessageClick}\r\n          />\r\n        ))}\r\n      </InfiniteScroll>\r\n    </Box>\r\n  );\r\n};\r\n\r\nconst CustomSpinner = () => (\r\n  <Box mt={6} display='flex' align='center' justifyContent='center'>\r\n    <Spinner\r\n      thickness='4px'\r\n      speed='0.65s'\r\n      emptyColor='gray.200'\r\n      color='blue.500'\r\n      size='xl'\r\n    />\r\n  </Box>\r\n);\r\n\r\nconst EmailList = () => {\r\n  const { messages, loading } = useContext(EmailContext);\r\n\r\n  return (\r\n    <Flex\r\n      direction='column'\r\n      wrap='no-wrap'\r\n      w='26%'\r\n      h='100%'\r\n      bg='#f1f1f1'\r\n      color='black'\r\n    >\r\n      {/* Search bar */}\r\n      <SearchBar />\r\n\r\n      {/* Messages */}\r\n      {!messages.length && loading ? <CustomSpinner /> : <Messages />}\r\n    </Flex>\r\n  );\r\n};\r\n\r\nexport default EmailList;\r\n","import React, { Fragment } from \"react\";\r\nimport { Base64 } from \"js-base64\";\r\nimport { MdReplay } from \"react-icons/md\";\r\nimport PropTypes from \"prop-types\";\r\nimport {\r\n  Button,\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Input,\r\n  FormControl,\r\n  Textarea,\r\n  useToast,\r\n  useDisclosure,\r\n} from \"@chakra-ui/core\";\r\n\r\nconst ReplyModel = ({ replayData }) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const toast = useToast();\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const form = e.target;\r\n    const emailTo = form.elements[\"emailTo\"].value;\r\n    const subject = form.elements[\"subject\"].value;\r\n    const replayMsgId = form.elements[\"reply-message-id\"].value;\r\n    const message = form.elements[\"message\"].value;\r\n\r\n    // Send Replay\r\n    sendMessage(\r\n      {\r\n        To: emailTo,\r\n        Subject: subject,\r\n        \"In-Reply-To\": replayMsgId,\r\n      },\r\n      message,\r\n      displayToast\r\n    );\r\n\r\n    onClose();\r\n  };\r\n\r\n  const sendMessage = (headers_obj, message, callback) => {\r\n    let email = \"\";\r\n\r\n    for (let header in headers_obj)\r\n      email += header += \": \" + headers_obj[header] + \"\\r\\n\";\r\n\r\n    email += \"\\r\\n\" + message;\r\n\r\n    const base64EncodedEmail = Base64.encodeURI(email);\r\n    const request = window.gapi.client.gmail.users.messages.send({\r\n      userId: \"me\",\r\n      resource: {\r\n        raw: base64EncodedEmail,\r\n      },\r\n    });\r\n\r\n    request.execute(callback);\r\n  };\r\n\r\n  const displayToast = ({ result }) => {\r\n    if (result.labelIds.indexOf(\"SENT\") !== -1) {\r\n      toast({\r\n        title: \"Message Sent.\",\r\n        status: \"success\",\r\n        duration: 3000,\r\n        isClosable: true,\r\n      });\r\n    } else {\r\n      toast({\r\n        title: \"An error occurred.\",\r\n        description: \"Unable to sent your replay.\",\r\n        status: \"error\",\r\n        duration: 3000,\r\n        isClosable: true,\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <Button\r\n        rightIcon={MdReplay}\r\n        variantColor='blue'\r\n        variant='outline'\r\n        onClick={onOpen}\r\n      >\r\n        Replay\r\n      </Button>\r\n      <Modal\r\n        isOpen={isOpen}\r\n        size='xl'\r\n        onClose={onClose}\r\n        closeOnOverlayClick={false}\r\n      >\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader>Replay </ModalHeader>\r\n          <ModalCloseButton />\r\n          <form id='form' onSubmit={handleSubmit}>\r\n            <ModalBody>\r\n              <Input\r\n                type='hidden'\r\n                id='reply-message-id'\r\n                value={replayData.msgId}\r\n                readOnly\r\n              />\r\n              <FormControl isRequired>\r\n                <Input\r\n                  type='email'\r\n                  id='emailTo'\r\n                  placeholder='To'\r\n                  aria-describedby='email-helper-text'\r\n                  value={replayData.to}\r\n                  readOnly\r\n                />\r\n              </FormControl>\r\n              <FormControl isRequired>\r\n                <Input\r\n                  type='text'\r\n                  id='subject'\r\n                  placeholder='Subject'\r\n                  aria-describedby='subject-email-helper-text'\r\n                  value={replayData.subject}\r\n                  readOnly\r\n                />\r\n              </FormControl>\r\n              <FormControl isRequired>\r\n                <Textarea\r\n                  id='message'\r\n                  minH='280px'\r\n                  size='xl'\r\n                  resize='vertical'\r\n                />\r\n              </FormControl>\r\n            </ModalBody>\r\n\r\n            <ModalFooter>\r\n              <Button type='reset' variantColor='blue' mr={3} onClick={onClose}>\r\n                Close\r\n              </Button>\r\n              <Button type='submit' variantColor='green'>\r\n                Send\r\n              </Button>\r\n            </ModalFooter>\r\n          </form>\r\n        </ModalContent>\r\n      </Modal>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default ReplyModel;\r\n\r\nReplyModel.prototype = {\r\n  replayData: PropTypes.object.isRequired,\r\n};\r\n","import React, { Fragment } from \"react\";\r\nimport { Base64 } from \"js-base64\";\r\nimport { MdArrowForward } from \"react-icons/md\";\r\nimport { getHeader } from \"../Helper\";\r\nimport PropTypes from \"prop-types\";\r\nimport {\r\n  Button,\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Input,\r\n  FormControl,\r\n  Textarea,\r\n  useToast,\r\n  useDisclosure,\r\n} from \"@chakra-ui/core\";\r\n\r\nconst ForwardModel = ({ forwardData, getMessageBody }) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const toast = useToast();\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const form = e.target;\r\n    const forwardTo = form.elements[\"emailTo\"].value;\r\n    handleForwardMsg(\r\n      forwardTo,\r\n      forwardData.payload.headers,\r\n      getMessageBody(forwardData.payload)\r\n    );\r\n    onClose();\r\n  };\r\n\r\n  const handleForwardMsg = (forwardTo, headers, body) => {\r\n    let email = \"\";\r\n    email += `From: ${getHeader(headers, \"From\")} \\r\\n`;\r\n    email += `Date: ${getHeader(headers, \"Date\")} \\r\\n`;\r\n    email += `Subject: ${getHeader(headers, \"Subject\")} \\r\\n`;\r\n    email += `To: ${forwardTo} \\r\\n`;\r\n    email += `Content-Type: text/html; charset=UTF-8 \\r\\n`;\r\n    email += `\\r\\n ${body}`;\r\n\r\n    sendMessage(\"me\", email, displayToast);\r\n  };\r\n\r\n  const sendMessage = (userId, email, callback) => {\r\n    const base64EncodedEmail = Base64.encodeURI(email);\r\n    const request = window.gapi.client.gmail.users.messages.send({\r\n      userId: userId,\r\n      resource: {\r\n        raw: base64EncodedEmail,\r\n      },\r\n    });\r\n    request.execute(callback);\r\n  };\r\n\r\n  const displayToast = ({ result }) => {\r\n    if (result.labelIds.indexOf(\"SENT\") !== -1) {\r\n      toast({\r\n        title: \"Email forwarded Successfully.\",\r\n        status: \"success\",\r\n        duration: 3000,\r\n        isClosable: true,\r\n      });\r\n    } else {\r\n      toast({\r\n        title: \"An error occurred.\",\r\n        description: \"Unable to sent your mail.\",\r\n        status: \"error\",\r\n        duration: 3000,\r\n        isClosable: true,\r\n      });\r\n    }\r\n  };\r\n\r\n  const getForwardHead = (headers) => {\r\n    let msg = \"\";\r\n    msg += \"From: \" + getHeader(headers, \"From\") + \"\\r\\n\";\r\n    msg += \"Date: \" + getHeader(headers, \"Date\") + \"\\r\\n\";\r\n    msg += \"Subject: \" + getHeader(headers, \"Subject\") + \"\\r\\n\";\r\n    msg += \"To: \" + getHeader(headers, \"To\") + \"\\r\\n\";\r\n    return msg;\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <Button\r\n        rightIcon={MdArrowForward}\r\n        variantColor='blue'\r\n        variant='outline'\r\n        onClick={onOpen}\r\n      >\r\n        Forward\r\n      </Button>\r\n\r\n      <Modal\r\n        isOpen={isOpen}\r\n        size='xl'\r\n        onClose={onClose}\r\n        closeOnOverlayClick={false}\r\n      >\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader>Forward </ModalHeader>\r\n          <ModalCloseButton />\r\n          <form id='form' onSubmit={handleSubmit}>\r\n            <ModalBody>\r\n              <FormControl isRequired>\r\n                <Input\r\n                  type='email'\r\n                  id='emailTo'\r\n                  placeholder='To'\r\n                  aria-describedby='email-helper-text'\r\n                />\r\n              </FormControl>\r\n              <FormControl isRequired>\r\n                <Input\r\n                  type='text'\r\n                  id='subject'\r\n                  placeholder='Subject'\r\n                  aria-describedby='subject-email-helper-text'\r\n                  value={getHeader(forwardData.payload.headers, \"Subject\")}\r\n                  readOnly\r\n                />\r\n              </FormControl>\r\n              <FormControl isRequired>\r\n                <Textarea\r\n                  id='message'\r\n                  minH='280px'\r\n                  size='xl'\r\n                  resize='vertical'\r\n                  value={\r\n                    \"------Forward Message------\\r\\n\" +\r\n                    getForwardHead(forwardData.payload.headers)\r\n                  }\r\n                  readOnly\r\n                />\r\n              </FormControl>\r\n            </ModalBody>\r\n\r\n            <ModalFooter>\r\n              <Button type='reset' variantColor='blue' mr={3} onClick={onClose}>\r\n                Close\r\n              </Button>\r\n              <Button type='submit' variantColor='green'>\r\n                Send\r\n              </Button>\r\n            </ModalFooter>\r\n          </form>\r\n        </ModalContent>\r\n      </Modal>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default ForwardModel;\r\n\r\nForwardModel.prototype = {\r\n  forwardData: PropTypes.object.isRequired,\r\n  getMessageBody: PropTypes.func.isRequired,\r\n};\r\n","import React, { Fragment, useContext } from \"react\";\r\nimport EmailContext from \"../../context/email/emailContext\";\r\n\r\nimport ReplyModel from \"./ReplyModel\";\r\nimport ForwardModel from \"./ForwardModel\";\r\n\r\nimport { getHeader, removeQuote, formatDate } from \"../Helper\"; // Helper functions\r\nimport { Base64 } from \"js-base64\";\r\nimport { MdArchive } from \"react-icons/md\"; // Icons\r\nimport {\r\n  Flex,\r\n  Box,\r\n  Button,\r\n  AspectRatioBox,\r\n  Avatar,\r\n  Text,\r\n  useToast,\r\n  Heading,\r\n} from \"@chakra-ui/core\";\r\n\r\nimport emptyEmailImg from \"./empty_email.svg\";\r\n\r\nconst Email = () => {\r\n  const { message } = useContext(EmailContext);\r\n  const headers = message ? message.payload.headers : [];\r\n  const toast = useToast();\r\n\r\n  React.useEffect(() => {\r\n    if (message) {\r\n      addToFrame(message);\r\n    }\r\n    // eslint-disable-next-line\r\n  }, [message]);\r\n\r\n  const formatReplayData = (headers) => {\r\n    const replayTo =\r\n      getHeader(headers, \"Reply-to\") !== undefined\r\n        ? getHeader(headers, \"Reply-to\")\r\n        : getHeader(headers, \"From\");\r\n    const replaySubject = getHeader(headers, \"Subject\");\r\n    const replayMsgId = getHeader(headers, \"Message-ID\");\r\n\r\n    return {\r\n      to: `${replayTo}`,\r\n      subject: `Re: ${replaySubject}`,\r\n      msgId: `${replayMsgId}`,\r\n    };\r\n  };\r\n\r\n  const handleTrashBtn = (userId, messageId) => {\r\n    return window.gapi.client.gmail.users.messages\r\n      .trash({\r\n        userId: userId,\r\n        id: messageId,\r\n      })\r\n      .then((resp) => {\r\n        if (resp.status === 200) {\r\n          toast({\r\n            title: \"Message Deleted\",\r\n            status: \"error\",\r\n            duration: 3000,\r\n            isClosable: true,\r\n          });\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"error: \", error);\r\n        toast({\r\n          title: \"An error occurred.\",\r\n          description: \"Unable to Delete Message.\",\r\n          status: \"warning\",\r\n          duration: 3000,\r\n          isClosable: true,\r\n        });\r\n      });\r\n  };\r\n\r\n  const handleArchiveBtn = (ids, labelIds) => {\r\n    return window.gapi.client.gmail.users.messages\r\n      .batchModify({\r\n        userId: \"me\",\r\n        resource: {\r\n          ids: ids,\r\n          removeLabelIds: labelIds,\r\n        },\r\n      })\r\n      .then((resp) => {\r\n        if (resp.status === 204) {\r\n          toast({\r\n            title: \"Message Archived\",\r\n            description: \"The Message is now in archive category.\",\r\n            status: \"success\",\r\n            duration: 3000,\r\n            isClosable: true,\r\n          });\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"error: \", error);\r\n        toast({\r\n          title: \"An error occurred.\",\r\n          description: \"Unable to Archive Message.\",\r\n          status: \"error\",\r\n          duration: 3000,\r\n          isClosable: true,\r\n        });\r\n      });\r\n  };\r\n\r\n  const addToFrame = (message) => {\r\n    let ifrm = document.getElementById(\"iframe\").contentWindow.document;\r\n    ifrm.body.innerHTML = getMessageBody(message.payload);\r\n  };\r\n\r\n  const getMessageBody = (message) => {\r\n    const encodedBody =\r\n      typeof message.parts === \"undefined\"\r\n        ? message.body.data\r\n        : getHTMLPart(message.parts);\r\n\r\n    return Base64.decode(encodedBody);\r\n  };\r\n\r\n  const getHTMLPart = (arr) => {\r\n    for (var x = 0; x <= arr.length; x++) {\r\n      if (typeof arr[x].parts === \"undefined\") {\r\n        if (arr[x].mimeType === \"text/html\") {\r\n          return arr[x].body.data;\r\n        }\r\n      } else {\r\n        return getHTMLPart(arr[x].parts);\r\n      }\r\n    }\r\n    return \"\";\r\n  };\r\n\r\n  return (\r\n    <Flex\r\n      direction='column'\r\n      wrap='no-wrap'\r\n      w='58%'\r\n      h='100%'\r\n      p='0.6rem 1rem'\r\n      bg='white'\r\n      color='black'\r\n      border='1px'\r\n      borderColor='gray.200'\r\n      borderTopRightRadius='md'\r\n      borderBottomRightRadius='md'\r\n    >\r\n      {!message ? (\r\n        <EmptyMail />\r\n      ) : (\r\n        <Fragment>\r\n          {/* Header Buttons */}\r\n          <Flex justify='space-around' wrap='no-wrap' mb={2}>\r\n            <ReplyModel replayData={formatReplayData(headers)} />\r\n            <ForwardModel\r\n              forwardData={message}\r\n              getMessageBody={getMessageBody}\r\n            />\r\n            <Button\r\n              rightIcon={MdArchive}\r\n              variantColor='blue'\r\n              variant='outline'\r\n              onClick={() => handleArchiveBtn([message.id], [\"INBOX\"])}\r\n            >\r\n              Archive\r\n            </Button>\r\n            <Button\r\n              rightIcon='delete'\r\n              variantColor='blue'\r\n              variant='outline'\r\n              onClick={() => handleTrashBtn(\"me\", message.id)}\r\n            >\r\n              Delete\r\n            </Button>\r\n          </Flex>\r\n\r\n          {/* Mail Container */}\r\n          <Flex\r\n            className='mailContainer'\r\n            flexGrow='2'\r\n            direction='column'\r\n            wrap='no-wrap'\r\n            p={2}\r\n          >\r\n            <Box className='mailHeader' mb={2}>\r\n              <Text fontSize='lg' fontWeight='bold' color='gray.700' mb={1}>\r\n                {getHeader(headers, \"Subject\")}\r\n              </Text>\r\n              <Flex wrap='no-wrap' justify='flex-start'>\r\n                <Avatar\r\n                  name={removeQuote(getHeader(headers, \"From\").split(\"<\")[0])}\r\n                  src='https://bit.ly/tioluwani-kolawole'\r\n                  mr={4}\r\n                />\r\n                <Box w='80%'>\r\n                  <Text fontSize='md' color='gray.700'>\r\n                    {getHeader(headers, \"From\")}\r\n                  </Text>\r\n                  <Text fontSize='sm' color='gray.500'>\r\n                    {formatDate(getHeader(headers, \"Date\"))}\r\n                  </Text>\r\n                </Box>\r\n              </Flex>\r\n              <Text fontSize='sm' color='gray.700' mt={1}>\r\n                {`To: ${getHeader(headers, \"To\")}`}\r\n              </Text>\r\n            </Box>\r\n            <Box className='mailBody' flexGrow='2'>\r\n              <AspectRatioBox ratio={16 / 9} h='100%'>\r\n                <Box as='iframe' id='iframe' title='messageBody'>\r\n                  <p>Your browser does not support iframes.</p>\r\n                </Box>\r\n              </AspectRatioBox>\r\n            </Box>\r\n          </Flex>\r\n        </Fragment>\r\n      )}\r\n    </Flex>\r\n  );\r\n};\r\n\r\nexport default Email;\r\n\r\nconst EmptyMail = () => (\r\n  <Flex\r\n    flexDirection='column'\r\n    justify='center'\r\n    alignItems='center'\r\n    mb={3}\r\n    style={{ height: \"100%\" }}\r\n  >\r\n    <img\r\n      src={emptyEmailImg}\r\n      alt='React Logo'\r\n      style={{ width: \"40%\", height: \"auto\" }}\r\n    />\r\n    <Heading as='h3' size='lg' color='#a6b0b7' mt={5}>\r\n      Click on Email to Open it\r\n    </Heading>\r\n  </Flex>\r\n);\r\n","import React, { useEffect, useState, useContext } from \"react\";\r\n\r\nimport EmailState from \"./context/email/EmailState\";\r\nimport EmailContext from \"./context/email/emailContext\";\r\n\r\nimport MailboxList from \"./Components/MailboxList/MailboxList\";\r\nimport EmailList from \"./Components/EmailList/EmailList\";\r\nimport Email from \"./Components/Email/Email\";\r\n\r\nimport { ThemeProvider, CSSReset, Button, Flex } from \"@chakra-ui/core\";\r\nimport { FcGoogle } from \"react-icons/fc\";\r\n\r\nconst SignIn = ({ handleAuthClick, loading }) => (\r\n  <Flex h='100vh' justify='center' alignItems='center' bg='#e5f4f1'>\r\n    <Button\r\n      isLoading={loading}\r\n      leftIcon={FcGoogle}\r\n      height='50px'\r\n      variantColor='blue'\r\n      variant='outline'\r\n      backgroundColor='white'\r\n      onClick={handleAuthClick}\r\n    >\r\n      Sign in with Google\r\n    </Button>\r\n  </Flex>\r\n);\r\n\r\nconst Main = () => {\r\n  const { getMessages } = useContext(EmailContext);\r\n\r\n  useEffect(() => {\r\n    getMessages();\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  return (\r\n    <Flex\r\n      h='100vh'\r\n      minH='600px'\r\n      justify='space-arround'\r\n      wrap='no-wrap'\r\n      p='1em'\r\n      bg='#e5f4f1'\r\n      color='white'\r\n    >\r\n      <MailboxList />\r\n      <EmailList />\r\n      <Email />\r\n    </Flex>\r\n  );\r\n};\r\n\r\nconst App = () => {\r\n  const [isAuthorize, setIsAuthorize] = useState(false);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      await window.gapi.load(\"client:auth2\", {\r\n        callback: () => {\r\n          // Handle gapi.client initialization.\r\n          window.gapi.client.setApiKey(process.env.REACT_APP_API_KEY);\r\n          window.gapi.auth.authorize(\r\n            {\r\n              client_id: process.env.REACT_APP_CLIENT_ID,\r\n              scope: process.env.REACT_APP_SCOPES,\r\n              immediate: true,\r\n            },\r\n            handleAuthResult\r\n          );\r\n        },\r\n        onerror: function () {\r\n          // Handle loading error.\r\n          console.log(\"gapi.client failed to load!\");\r\n        },\r\n        timeout: 5000, // 5 seconds.\r\n        ontimeout: function () {\r\n          // Handle timeout.\r\n          console.log(\"gapi.client could not load in a timely manner!\");\r\n        },\r\n      });\r\n    })();\r\n\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  const handleAuthResult = (authResult) => {\r\n    if (authResult && !authResult.error) {\r\n      console.log(\"Sign-in successful\");\r\n      // setIsAuthorize(true);\r\n      loadClient();\r\n    } else {\r\n      console.error(\"handleAuthResult...\");\r\n      console.error(authResult);\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleAuthClick = () => {\r\n    setLoading(true);\r\n    return window.gapi.auth.authorize(\r\n      {\r\n        client_id: process.env.REACT_APP_CLIENT_ID,\r\n        scope: process.env.REACT_APP_SCOPES,\r\n        immediate: false,\r\n      },\r\n      handleAuthResult\r\n    );\r\n  };\r\n\r\n  const loadClient = () => {\r\n    return window.gapi.client.load(\"gmail\", \"v1\").then(\r\n      (res) => {\r\n        console.log(\"gapi client loaded for API\");\r\n        setIsAuthorize(true);\r\n        // getMessages();\r\n      },\r\n      (err) => {\r\n        console.error(\"Error loading window.gapi client for API\", err);\r\n      }\r\n    );\r\n  };\r\n\r\n  return (\r\n    <EmailState>\r\n      <ThemeProvider>\r\n        <CSSReset />\r\n        {isAuthorize ? (\r\n          <Main />\r\n        ) : (\r\n          <SignIn loading={loading} handleAuthClick={handleAuthClick} />\r\n        )}\r\n      </ThemeProvider>\r\n    </EmailState>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n","module.exports = __webpack_public_path__ + \"static/media/empty_email.c9034baf.svg\";"],"sourceRoot":""}
{"version":3,"sources":["Components/MailboxList/SendModel.js","Components/MailboxList/MailboxList.js","Components/Helper.js","Components/EmailList/EmailRow.js","Components/EmailList/EmailList.js","Components/Email/ReplyModel.js","Components/Email/ForwardModel.js","Components/Email/Email.js","App.js","index.js"],"names":["SendModel","useDisclosure","isOpen","onOpen","onClose","toast","useToast","sendMessage","headers_obj","message","callback","email","header","base64EncodedEmail","Base64","encodeURI","window","gapi","client","gmail","users","messages","send","userId","resource","raw","execute","displayToast","result","labelIds","indexOf","title","description","status","duration","isClosable","Button","w","h","leftIcon","BsPlusCircle","borderRadius","variant","variantColor","onClick","Modal","size","closeOnOverlayClick","id","onSubmit","e","preventDefault","form","target","emailTo","elements","value","subject","To","Subject","FormControl","isRequired","Input","type","placeholder","aria-describedby","Textarea","minH","resize","mr","MailboxList","useContext","EmailContext","getMessages","setCurrentLabel","useState","active","setActive","handleClick","categoryId","Box","bg","border","borderColor","borderTopLeftRadius","borderBottomLeftRadius","List","p","py","pl","MdInbox","justifyContent","MdStar","MdLabel","FiSend","FiFile","MdPeople","MdLoyalty","getHeader","headers","name","find","undefined","isEmpty","obj","key","hasOwnProperty","removeQuote","str","replace","EmailRow","handleMessageClick","payload","split","msg","html","txt","document","createElement","innerHTML","decodeHtml","snippet","substr","backgroundColor","Flex","wrap","justify","borderTop","borderBottom","cursor","Avatar","src","Text","fontSize","color","isTruncated","fontWeight","EmailList","direction","InputGroup","children","Icon","borderWidth","focusBorderColor","length","MessagesList","getOneMessage","hasMoreMessages","loadMoreMessages","messageId","currentTarget","getAttribute","overflowY","dataLength","next","hasMore","loader","scrollableTarget","map","index","ListSpinner","mt","display","align","Spinner","thickness","speed","emptyColor","ReplyModel","replayData","rightIcon","MdReplay","replayMsgId","msgId","readOnly","to","prototype","PropTypes","object","ForwardModel","forwardData","getMessageBody","handleForwardMsg","forwardTo","body","MdArrowForward","getForwardHead","func","Email","React","useEffect","addToFrame","getElementById","contentWindow","encodedBody","parts","data","getHTMLPart","decode","arr","x","mimeType","borderTopRightRadius","borderBottomRightRadius","mb","replayTo","replaySubject","formatReplayData","MdArchive","ids","batchModify","removeLabelIds","then","resp","catch","error","console","log","trash","className","flexGrow","strDate","date","Date","Intl","DateTimeFormat","year","month","day","hour","minute","hour12","format","formatDate","AspectRatioBox","ratio","as","createContext","App","currentLabel","setMessage","setMessages","setHasMoreMessages","nextPageToken","setNextPageToken","isAuthorize","setIsAuthorize","loading","setLoading","load","setApiKey","process","auth","authorize","client_id","scope","immediate","handleAuthResult","onerror","timeout","ontimeout","authResult","loadClient","res","err","list","maxResults","getMessagesData","forEach","get","Provider","pageToken","ThemeProvider","CSSReset","handleAuthClick","SignIn","alignItems","isLoading","FcGoogle","height","Main","ReactDOM","render"],"mappings":"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","file":"static/js/main.e77b2629.chunk.js","sourcesContent":["import React, { Fragment } from \"react\";\r\nimport { Base64 } from \"js-base64\";\r\nimport { BsPlusCircle } from \"react-icons/bs\";\r\nimport {\r\n  Button,\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Input,\r\n  FormControl,\r\n  Textarea,\r\n  useToast,\r\n  useDisclosure,\r\n} from \"@chakra-ui/core\";\r\n\r\nconst SendModel = () => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const toast = useToast();\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const form = e.target;\r\n    const emailTo = form.elements[\"emailTo\"].value;\r\n    const subject = form.elements[\"subject\"].value;\r\n    const message = form.elements[\"message\"].value;\r\n\r\n    // Send Simple Mail && Display Toast\r\n    sendMessage(\r\n      {\r\n        To: emailTo,\r\n        Subject: subject,\r\n      },\r\n      message,\r\n      displayToast\r\n    );\r\n\r\n    onClose();\r\n  };\r\n\r\n  const sendMessage = (headers_obj, message, callback) => {\r\n    let email = \"\";\r\n\r\n    for (var header in headers_obj)\r\n      email += header += \": \" + headers_obj[header] + \"\\r\\n\";\r\n\r\n    email += \"\\r\\n\" + message;\r\n\r\n    const base64EncodedEmail = Base64.encodeURI(email);\r\n    const request = window.gapi.client.gmail.users.messages.send({\r\n      userId: \"me\",\r\n      resource: {\r\n        raw: base64EncodedEmail,\r\n      },\r\n    });\r\n    request.execute(callback);\r\n  };\r\n\r\n  const displayToast = ({ result }) => {\r\n    if (result.labelIds.indexOf(\"SENT\") !== -1) {\r\n      toast({\r\n        title: \"Message Sent.\",\r\n        description: \"We've Sent your email.\",\r\n        status: \"success\",\r\n        duration: 9000,\r\n        isClosable: true,\r\n      });\r\n    } else {\r\n      toast({\r\n        title: \"An error occurred.\",\r\n        description: \"Unable to sent your email.\",\r\n        status: \"error\",\r\n        duration: 9000,\r\n        isClosable: true,\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <Button\r\n        w='100%'\r\n        h='48px'\r\n        leftIcon={BsPlusCircle}\r\n        borderRadius='20px'\r\n        variant='solid'\r\n        variantColor='blue'\r\n        onClick={onOpen}\r\n      >\r\n        New Message\r\n      </Button>\r\n      <Modal\r\n        isOpen={isOpen}\r\n        size='xl'\r\n        onClose={onClose}\r\n        closeOnOverlayClick={false}\r\n      >\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader>New Message</ModalHeader>\r\n          <ModalCloseButton />\r\n          <form id='form' onSubmit={handleSubmit}>\r\n            <ModalBody>\r\n              <FormControl isRequired>\r\n                <Input\r\n                  type='email'\r\n                  id='emailTo'\r\n                  placeholder='To'\r\n                  aria-describedby='email-helper-text'\r\n                />\r\n              </FormControl>\r\n              <FormControl isRequired>\r\n                <Input\r\n                  type='text'\r\n                  id='subject'\r\n                  placeholder='Subject'\r\n                  aria-describedby='subject-email-helper-text'\r\n                />\r\n              </FormControl>\r\n              <FormControl isRequired>\r\n                <Textarea\r\n                  id='message'\r\n                  minH='280px'\r\n                  size='xl'\r\n                  resize='vertical'\r\n                />\r\n              </FormControl>\r\n            </ModalBody>\r\n\r\n            <ModalFooter>\r\n              <Button type='reset' variantColor='blue' mr={3} onClick={onClose}>\r\n                Close\r\n              </Button>\r\n              <Button type='submit' variantColor='green'>\r\n                Send\r\n              </Button>\r\n            </ModalFooter>\r\n          </form>\r\n        </ModalContent>\r\n      </Modal>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default SendModel;\r\n","import React, { useState, useContext } from \"react\";\r\nimport { EmailContext } from \"../../App\";\r\nimport SendModel from \"./SendModel\";\r\n\r\n// Import Icons\r\nimport { Button, Box, List, ListItem } from \"@chakra-ui/core\";\r\nimport { MdLabel, MdStar, MdPeople, MdLoyalty, MdInbox } from \"react-icons/md\";\r\nimport { FiSend, FiFile } from \"react-icons/fi\";\r\n\r\nconst MailboxList = () => {\r\n  const { getMessages, setCurrentLabel } = useContext(EmailContext);\r\n  const [active, setActive] = useState(\"INBOX\");\r\n\r\n  const handleClick = (e) => {\r\n    const categoryId = e.target.id;\r\n    setActive(categoryId);\r\n    setCurrentLabel(categoryId)\r\n\r\n    // Get Messages using clicked category\r\n    getMessages(categoryId);\r\n  };\r\n\r\n  return (\r\n    <Box\r\n      w='16%'\r\n      h='100%'\r\n      bg='white'\r\n      border='1px'\r\n      borderColor='gray.200'\r\n      borderTopLeftRadius='md'\r\n      borderBottomLeftRadius='md'\r\n    >\r\n      <List>\r\n        {/* Send Model */}\r\n        <ListItem p='0.5rem 1rem 1rem'>\r\n          <SendModel />\r\n        </ListItem>\r\n\r\n        {/* Labels Buttons */}\r\n        <ListItem>\r\n          <Button\r\n            id='INBOX'\r\n            w='100%'\r\n            h='45px'\r\n            py={2}\r\n            pl={8}\r\n            leftIcon={MdInbox}\r\n            variantColor='blue'\r\n            variant={active === \"INBOX\" ? \"solid\" : \"ghost\"}\r\n            justifyContent='flex-start'\r\n            onClick={handleClick}\r\n          >\r\n            Inbox\r\n          </Button>\r\n        </ListItem>\r\n        <ListItem>\r\n          <Button\r\n            id='STARRED'\r\n            w='100%'\r\n            h='45px'\r\n            py={2}\r\n            pl={8}\r\n            leftIcon={MdStar}\r\n            variantColor='blue'\r\n            variant={active === \"STARRED\" ? \"solid\" : \"ghost\"}\r\n            justifyContent='flex-start'\r\n            onClick={handleClick}\r\n          >\r\n            Starred\r\n          </Button>\r\n        </ListItem>\r\n        <ListItem>\r\n          <Button\r\n            id='IMPORTANT'\r\n            w='100%'\r\n            h='45px'\r\n            py={2}\r\n            pl={8}\r\n            leftIcon={MdLabel}\r\n            variantColor='blue'\r\n            variant={active === \"IMPORTANT\" ? \"solid\" : \"ghost\"}\r\n            justifyContent='flex-start'\r\n            onClick={handleClick}\r\n          >\r\n            Important\r\n          </Button>\r\n        </ListItem>\r\n        <ListItem>\r\n          <Button\r\n            id='SENT'\r\n            w='100%'\r\n            h='45px'\r\n            py={2}\r\n            pl={8}\r\n            leftIcon={FiSend}\r\n            variantColor='blue'\r\n            variant={active === \"SENT\" ? \"solid\" : \"ghost\"}\r\n            justifyContent='flex-start'\r\n            onClick={handleClick}\r\n          >\r\n            Sent\r\n          </Button>\r\n        </ListItem>\r\n        <ListItem>\r\n          <Button\r\n            id='DRAFT'\r\n            w='100%'\r\n            h='45px'\r\n            py={2}\r\n            pl={8}\r\n            leftIcon={FiFile}\r\n            variantColor='blue'\r\n            variant={active === \"DRAFT\" ? \"solid\" : \"ghost\"}\r\n            justifyContent='flex-start'\r\n            onClick={handleClick}\r\n          >\r\n            Drafts\r\n          </Button>\r\n        </ListItem>\r\n        <ListItem>\r\n          <Button\r\n            id='TRASH'\r\n            w='100%'\r\n            h='45px'\r\n            py={2}\r\n            pl={8}\r\n            leftIcon='delete'\r\n            variantColor='blue'\r\n            variant={active === \"TRASH\" ? \"solid\" : \"ghost\"}\r\n            justifyContent='flxex-start'\r\n            onClick={handleClick}\r\n          >\r\n            Trash\r\n          </Button>\r\n        </ListItem>\r\n        <ListItem>\r\n          <Button\r\n            id='CATEGORY_SOCIAL'\r\n            w='100%'\r\n            h='45px'\r\n            py={2}\r\n            pl={8}\r\n            leftIcon={MdPeople}\r\n            variantColor='blue'\r\n            variant={active === \"CATEGORY_SOCIAL\" ? \"solid\" : \"ghost\"}\r\n            justifyContent='flxex-start'\r\n            onClick={handleClick}\r\n          >\r\n            Social\r\n          </Button>\r\n        </ListItem>\r\n        <ListItem>\r\n          <Button\r\n            id='CATEGORY_PROMOTIONS'\r\n            w='100%'\r\n            h='45px'\r\n            py={2}\r\n            pl={8}\r\n            leftIcon={MdLoyalty}\r\n            variantColor='blue'\r\n            variant={active === \"CATEGORY_PROMOTIONS\" ? \"solid\" : \"ghost\"}\r\n            justifyContent='flxex-start'\r\n            onClick={handleClick}\r\n          >\r\n            Promotions\r\n          </Button>\r\n        </ListItem>\r\n      </List>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default MailboxList;\r\n","export const getHeader = (headers, name) => {\r\n  const header = headers.find((header) => header.name === name);\r\n  return header !== undefined ? header.value : undefined;\r\n};\r\n\r\nexport const isEmpty = (obj) => {\r\n  for (var key in obj) {\r\n    if (obj.hasOwnProperty(key)) return false;\r\n  }\r\n  return true;\r\n};\r\n\r\nexport const decodeHtml = (html) => {\r\n  let txt = document.createElement(\"textarea\");\r\n  txt.innerHTML = html;\r\n  return txt.value;\r\n};\r\n\r\nexport const removeQuote = (str) => {\r\n  return str.replace(/['\"]+/g, \"\");\r\n};\r\n\r\nexport const formatDate = (strDate) => {\r\n  const date = new Date(strDate);\r\n  const options = {\r\n    year: \"numeric\",\r\n    month: \"numeric\",\r\n    day: \"numeric\",\r\n    hour: \"numeric\",\r\n    minute: \"numeric\",\r\n    hour12: true,\r\n  };\r\n  return new Intl.DateTimeFormat(\"en-US\", options).format(date);\r\n};\r\n","import React from \"react\";\r\nimport { getHeader, decodeHtml, removeQuote } from \"../Helper\";\r\nimport { Flex, Box, Avatar, Text } from \"@chakra-ui/core\";\r\n\r\nconst EmailRow = ({ message, handleMessageClick }) => {\r\n  const name = removeQuote(\r\n    getHeader(message.payload.headers, \"From\").split(\"<\")[0]\r\n  );\r\n  const subject = getHeader(message.payload.headers, \"Subject\");\r\n  const msg = decodeHtml(message.snippet.substr(0, 75));\r\n  const backgroundColor =\r\n    message.labelIds.indexOf(\"UNREAD\") > -1 ? \"#fff\" : \"#E2E8F0\";\r\n\r\n  return (\r\n    <Flex\r\n      key={message.id}\r\n      id={message.id}\r\n      onClick={handleMessageClick}\r\n      wrap='no-wrap'\r\n      justify='space-around'\r\n      py={2}\r\n      bg={backgroundColor}\r\n      borderTop='1px'\r\n      borderBottom='1px'\r\n      borderColor='gray.300'\r\n      cursor='pointer'\r\n    >\r\n      <Avatar name={name} src='https://bit.ly/tioluwani-kolawole' />\r\n      <Box w='80%'>\r\n        <Text fontSize='sm' color='gray.700' isTruncated>\r\n          {name}\r\n        </Text>\r\n        <Text fontSize='md' fontWeight='bold' color='#3182ce' isTruncated>\r\n          {subject}\r\n        </Text>\r\n        <Text fontSize='xs' color='gray.500'>\r\n          {msg}\r\n        </Text>\r\n      </Box>\r\n    </Flex>\r\n  );\r\n};\r\n\r\nexport default EmailRow;\r\n","import React, { useContext } from \"react\";\r\nimport { EmailContext } from \"../../App\";\r\nimport EmailRow from \"./EmailRow\";\r\nimport InfiniteScroll from \"react-infinite-scroll-component\";\r\nimport {\r\n  Flex,\r\n  Box,\r\n  Input,\r\n  InputGroup,\r\n  InputLeftElement,\r\n  Icon,\r\n  Spinner,\r\n} from \"@chakra-ui/core\";\r\n\r\nconst EmailList = () => {\r\n  const { messages } = useContext(EmailContext);\r\n\r\n  return (\r\n    <Flex\r\n      direction='column'\r\n      wrap='no-wrap'\r\n      w='26%'\r\n      h='100%'\r\n      bg='#f1f1f1'\r\n      color='black'\r\n    >\r\n      {/* Search bar */}\r\n      <Box py='5px' bg='white' border='1px' borderColor='gray.200'>\r\n        <InputGroup size='lg'>\r\n          <InputLeftElement\r\n            children={<Icon name='search' color='gray.300' />}\r\n          />\r\n          <Input\r\n            type='text'\r\n            placeholder='Search mail'\r\n            borderWidth='0px'\r\n            borderRadius='0px'\r\n            focusBorderColor='white'\r\n          />\r\n        </InputGroup>\r\n      </Box>\r\n\r\n      {/* Message List */}\r\n      {!messages.length ? <ListSpinner /> : <MessagesList />}\r\n    </Flex>\r\n  );\r\n};\r\n\r\nexport default EmailList;\r\n\r\nconst MessagesList = () => {\r\n  const {\r\n    messages,\r\n    getOneMessage,\r\n    hasMoreMessages,\r\n    loadMoreMessages,\r\n  } = useContext(EmailContext);\r\n\r\n\r\n  const fetchMoreData = () => {\r\n    // Load more Messages\r\n    loadMoreMessages();\r\n  };\r\n\r\n  const handleMessageClick = (e) => {\r\n    const messageId = e.currentTarget.getAttribute(\"id\");\r\n    getOneMessage(messageId);\r\n  };\r\n\r\n  return (\r\n    <Box overflowY='auto' id='scrollableDiv'>\r\n      <InfiniteScroll\r\n        dataLength={messages.length}\r\n        next={fetchMoreData}\r\n        hasMore={hasMoreMessages}\r\n        loader={<h4>Loading...</h4>}\r\n        scrollableTarget='scrollableDiv'\r\n      >\r\n        {messages.map((message, index) => (\r\n          <EmailRow\r\n            key={index}\r\n            message={message}\r\n            handleMessageClick={handleMessageClick}\r\n          />\r\n        ))}\r\n      </InfiniteScroll>\r\n    </Box>\r\n  );\r\n};\r\n\r\nconst ListSpinner = () => (\r\n  <Box mt={6} display='flex' align='center' justifyContent='center'>\r\n    <Spinner\r\n      thickness='4px'\r\n      speed='0.65s'\r\n      emptyColor='gray.200'\r\n      color='blue.500'\r\n      size='xl'\r\n    />\r\n  </Box>\r\n);\r\n","import React, { Fragment } from \"react\";\r\nimport { Base64 } from \"js-base64\";\r\nimport { MdReplay } from \"react-icons/md\";\r\nimport PropTypes from \"prop-types\";\r\nimport {\r\n  Button,\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Input,\r\n  FormControl,\r\n  Textarea,\r\n  useToast,\r\n  useDisclosure,\r\n} from \"@chakra-ui/core\";\r\n\r\nconst ReplyModel = ({ replayData }) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const toast = useToast();\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const form = e.target;\r\n    const emailTo = form.elements[\"emailTo\"].value;\r\n    const subject = form.elements[\"subject\"].value;\r\n    const replayMsgId = form.elements[\"reply-message-id\"].value;\r\n    const message = form.elements[\"message\"].value;\r\n\r\n    // Send Replay\r\n    sendMessage(\r\n      {\r\n        To: emailTo,\r\n        Subject: subject,\r\n        \"In-Reply-To\": replayMsgId,\r\n      },\r\n      message,\r\n      displayToast\r\n    );\r\n\r\n    onClose();\r\n  };\r\n\r\n  const sendMessage = (headers_obj, message, callback) => {\r\n    let email = \"\";\r\n\r\n    for (let header in headers_obj)\r\n      email += header += \": \" + headers_obj[header] + \"\\r\\n\";\r\n\r\n    email += \"\\r\\n\" + message;\r\n\r\n    const base64EncodedEmail = Base64.encodeURI(email);\r\n    const request = window.gapi.client.gmail.users.messages.send({\r\n      userId: \"me\",\r\n      resource: {\r\n        raw: base64EncodedEmail,\r\n      },\r\n    });\r\n\r\n    request.execute(callback);\r\n  };\r\n\r\n  const displayToast = ({ result }) => {\r\n    if (result.labelIds.indexOf(\"SENT\") !== -1) {\r\n      toast({\r\n        title: \"Message Sent.\",\r\n        status: \"success\",\r\n        duration: 3000,\r\n        isClosable: true,\r\n      });\r\n    } else {\r\n      toast({\r\n        title: \"An error occurred.\",\r\n        description: \"Unable to sent your replay.\",\r\n        status: \"error\",\r\n        duration: 3000,\r\n        isClosable: true,\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <Button\r\n        rightIcon={MdReplay}\r\n        variantColor='blue'\r\n        variant='outline'\r\n        onClick={onOpen}\r\n      >\r\n        Replay\r\n      </Button>\r\n      <Modal\r\n        isOpen={isOpen}\r\n        size='xl'\r\n        onClose={onClose}\r\n        closeOnOverlayClick={false}\r\n      >\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader>Replay </ModalHeader>\r\n          <ModalCloseButton />\r\n          <form id='form' onSubmit={handleSubmit}>\r\n            <ModalBody>\r\n              <Input\r\n                type='hidden'\r\n                id='reply-message-id'\r\n                value={replayData.msgId}\r\n                readOnly\r\n              />\r\n              <FormControl isRequired>\r\n                <Input\r\n                  type='email'\r\n                  id='emailTo'\r\n                  placeholder='To'\r\n                  aria-describedby='email-helper-text'\r\n                  value={replayData.to}\r\n                  readOnly\r\n                />\r\n              </FormControl>\r\n              <FormControl isRequired>\r\n                <Input\r\n                  type='text'\r\n                  id='subject'\r\n                  placeholder='Subject'\r\n                  aria-describedby='subject-email-helper-text'\r\n                  value={replayData.subject}\r\n                  readOnly\r\n                />\r\n              </FormControl>\r\n              <FormControl isRequired>\r\n                <Textarea\r\n                  id='message'\r\n                  minH='280px'\r\n                  size='xl'\r\n                  resize='vertical'\r\n                />\r\n              </FormControl>\r\n            </ModalBody>\r\n\r\n            <ModalFooter>\r\n              <Button type='reset' variantColor='blue' mr={3} onClick={onClose}>\r\n                Close\r\n              </Button>\r\n              <Button type='submit' variantColor='green'>\r\n                Send\r\n              </Button>\r\n            </ModalFooter>\r\n          </form>\r\n        </ModalContent>\r\n      </Modal>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default ReplyModel;\r\n\r\nReplyModel.prototype = {\r\n  replayData: PropTypes.object.isRequired,\r\n};\r\n","import React, { Fragment } from \"react\";\r\nimport { Base64 } from \"js-base64\";\r\nimport { MdArrowForward } from \"react-icons/md\";\r\nimport { getHeader } from \"../Helper\";\r\nimport PropTypes from \"prop-types\";\r\nimport {\r\n  Button,\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Input,\r\n  FormControl,\r\n  Textarea,\r\n  useToast,\r\n  useDisclosure,\r\n} from \"@chakra-ui/core\";\r\n\r\nconst ForwardModel = ({ forwardData, getMessageBody }) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const toast = useToast();\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const form = e.target;\r\n    const forwardTo = form.elements[\"emailTo\"].value;\r\n    handleForwardMsg(\r\n      forwardTo,\r\n      forwardData.payload.headers,\r\n      getMessageBody(forwardData.payload)\r\n    );\r\n    onClose();\r\n  };\r\n\r\n  const handleForwardMsg = (forwardTo, headers, body) => {\r\n    let email = \"\";\r\n    email += `From: ${getHeader(headers, \"From\")} \\r\\n`;\r\n    email += `Date: ${getHeader(headers, \"Date\")} \\r\\n`;\r\n    email += `Subject: ${getHeader(headers, \"Subject\")} \\r\\n`;\r\n    email += `To: ${forwardTo} \\r\\n`;\r\n    email += `Content-Type: text/html; charset=UTF-8 \\r\\n`;\r\n    email += `\\r\\n ${body}`;\r\n\r\n    sendMessage(\"me\", email, displayToast);\r\n  };\r\n\r\n  const sendMessage = (userId, email, callback) => {\r\n    const base64EncodedEmail = Base64.encodeURI(email);\r\n    const request = window.gapi.client.gmail.users.messages.send({\r\n      userId: userId,\r\n      resource: {\r\n        raw: base64EncodedEmail,\r\n      },\r\n    });\r\n    request.execute(callback);\r\n  };\r\n\r\n  const displayToast = ({ result }) => {\r\n    if (result.labelIds.indexOf(\"SENT\") !== -1) {\r\n      toast({\r\n        title: \"Email forwarded Successfully.\",\r\n        status: \"success\",\r\n        duration: 3000,\r\n        isClosable: true,\r\n      });\r\n    } else {\r\n      toast({\r\n        title: \"An error occurred.\",\r\n        description: \"Unable to sent your mail.\",\r\n        status: \"error\",\r\n        duration: 3000,\r\n        isClosable: true,\r\n      });\r\n    }\r\n  };\r\n\r\n  const getForwardHead = (headers) => {\r\n    let msg = \"\";\r\n    msg += \"From: \" + getHeader(headers, \"From\") + \"\\r\\n\";\r\n    msg += \"Date: \" + getHeader(headers, \"Date\") + \"\\r\\n\";\r\n    msg += \"Subject: \" + getHeader(headers, \"Subject\") + \"\\r\\n\";\r\n    msg += \"To: \" + getHeader(headers, \"To\") + \"\\r\\n\";\r\n    return msg;\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <Button\r\n        rightIcon={MdArrowForward}\r\n        variantColor='blue'\r\n        variant='outline'\r\n        onClick={onOpen}\r\n      >\r\n        Forward\r\n      </Button>\r\n\r\n      <Modal\r\n        isOpen={isOpen}\r\n        size='xl'\r\n        onClose={onClose}\r\n        closeOnOverlayClick={false}\r\n      >\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader>Forward </ModalHeader>\r\n          <ModalCloseButton />\r\n          <form id='form' onSubmit={handleSubmit}>\r\n            <ModalBody>\r\n              <FormControl isRequired>\r\n                <Input\r\n                  type='email'\r\n                  id='emailTo'\r\n                  placeholder='To'\r\n                  aria-describedby='email-helper-text'\r\n                />\r\n              </FormControl>\r\n              <FormControl isRequired>\r\n                <Input\r\n                  type='text'\r\n                  id='subject'\r\n                  placeholder='Subject'\r\n                  aria-describedby='subject-email-helper-text'\r\n                  value={getHeader(forwardData.payload.headers, \"Subject\")}\r\n                  readOnly\r\n                />\r\n              </FormControl>\r\n              <FormControl isRequired>\r\n                <Textarea\r\n                  id='message'\r\n                  minH='280px'\r\n                  size='xl'\r\n                  resize='vertical'\r\n                  value={\r\n                    \"------Forward Message------\\r\\n\" +\r\n                    getForwardHead(forwardData.payload.headers)\r\n                  }\r\n                  readOnly\r\n                />\r\n              </FormControl>\r\n            </ModalBody>\r\n\r\n            <ModalFooter>\r\n              <Button type='reset' variantColor='blue' mr={3} onClick={onClose}>\r\n                Close\r\n              </Button>\r\n              <Button type='submit' variantColor='green'>\r\n                Send\r\n              </Button>\r\n            </ModalFooter>\r\n          </form>\r\n        </ModalContent>\r\n      </Modal>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default ForwardModel;\r\n\r\nForwardModel.prototype = {\r\n  forwardData: PropTypes.object.isRequired,\r\n  getMessageBody: PropTypes.func.isRequired,\r\n};\r\n","import React, { Fragment, useContext } from \"react\";\r\nimport { EmailContext } from \"../../App\";\r\nimport ReplyModel from \"./ReplyModel\";\r\nimport ForwardModel from \"./ForwardModel\";\r\n\r\nimport { getHeader, isEmpty, removeQuote, formatDate } from \"../Helper\"; // Helper functions\r\nimport { Base64 } from \"js-base64\";\r\nimport { MdArchive } from \"react-icons/md\"; // Icons\r\nimport {\r\n  Flex,\r\n  Box,\r\n  Button,\r\n  AspectRatioBox,\r\n  Avatar,\r\n  Text,\r\n  useToast,\r\n} from \"@chakra-ui/core\";\r\n\r\nconst Email = () => {\r\n  const { message } = useContext(EmailContext);\r\n  const headers = isEmpty(message) ? [] : message.payload.headers;\r\n  const toast = useToast();\r\n\r\n  React.useEffect(() => {\r\n    if (!isEmpty(message)) {\r\n      addToFrame(message);\r\n    }\r\n    // eslint-disable-next-line\r\n  }, [message]);\r\n\r\n  const formatReplayData = (headers) => {\r\n    const replayTo =\r\n      getHeader(headers, \"Reply-to\") !== undefined\r\n        ? getHeader(headers, \"Reply-to\")\r\n        : getHeader(headers, \"From\");\r\n    const replaySubject = getHeader(headers, \"Subject\");\r\n    const replayMsgId = getHeader(headers, \"Message-ID\");\r\n\r\n    return {\r\n      to: `${replayTo}`,\r\n      subject: `Re: ${replaySubject}`,\r\n      msgId: `${replayMsgId}`,\r\n    };\r\n  };\r\n\r\n  const handleTrashBtn = (userId, messageId) => {\r\n    return window.gapi.client.gmail.users.messages\r\n      .trash({\r\n        userId: userId,\r\n        id: messageId,\r\n      })\r\n      .then((resp) => {\r\n        if (resp.status === 200) {\r\n          toast({\r\n            title: \"Message Deleted\",\r\n            status: \"error\",\r\n            duration: 3000,\r\n            isClosable: true,\r\n          });\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"error: \", error);\r\n        toast({\r\n          title: \"An error occurred.\",\r\n          description: \"Unable to Delete Message.\",\r\n          status: \"warning\",\r\n          duration: 3000,\r\n          isClosable: true,\r\n        });\r\n      });\r\n  };\r\n\r\n  const handleArchiveBtn = (ids, labelIds) => {\r\n    return window.gapi.client.gmail.users.messages\r\n      .batchModify({\r\n        userId: \"me\",\r\n        resource: {\r\n          ids: ids,\r\n          removeLabelIds: labelIds,\r\n        },\r\n      })\r\n      .then((resp) => {\r\n        if (resp.status === 204) {\r\n          toast({\r\n            title: \"Message Archived\",\r\n            description: \"The Message is now in archive category.\",\r\n            status: \"success\",\r\n            duration: 3000,\r\n            isClosable: true,\r\n          });\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"error: \", error);\r\n        toast({\r\n          title: \"An error occurred.\",\r\n          description: \"Unable to Archive Message.\",\r\n          status: \"error\",\r\n          duration: 3000,\r\n          isClosable: true,\r\n        });\r\n      });\r\n  };\r\n\r\n  const addToFrame = (message) => {\r\n    let ifrm = document.getElementById(\"iframe\").contentWindow.document;\r\n    ifrm.body.innerHTML = getMessageBody(message.payload);\r\n  };\r\n\r\n  const getMessageBody = (message) => {\r\n    const encodedBody =\r\n      typeof message.parts === \"undefined\"\r\n        ? message.body.data\r\n        : getHTMLPart(message.parts);\r\n\r\n    return Base64.decode(encodedBody);\r\n  };\r\n\r\n  const getHTMLPart = (arr) => {\r\n    for (var x = 0; x <= arr.length; x++) {\r\n      if (typeof arr[x].parts === \"undefined\") {\r\n        if (arr[x].mimeType === \"text/html\") {\r\n          return arr[x].body.data;\r\n        }\r\n      } else {\r\n        return getHTMLPart(arr[x].parts);\r\n      }\r\n    }\r\n    return \"\";\r\n  };\r\n\r\n  return (\r\n    <Flex\r\n      direction='column'\r\n      wrap='no-wrap'\r\n      w='58%'\r\n      h='100%'\r\n      p='0.6rem 1rem'\r\n      bg='white'\r\n      color='black'\r\n      border='1px'\r\n      borderColor='gray.200'\r\n      borderTopRightRadius='md'\r\n      borderBottomRightRadius='md'\r\n    >\r\n      {!isEmpty(message) && (\r\n        <Fragment>\r\n          {/* Header Buttons */}\r\n          <Flex justify='space-around' wrap='no-wrap' mb={2}>\r\n            <ReplyModel replayData={formatReplayData(headers)} />\r\n            <ForwardModel\r\n              forwardData={message}\r\n              getMessageBody={getMessageBody}\r\n            />\r\n            <Button\r\n              rightIcon={MdArchive}\r\n              variantColor='blue'\r\n              variant='outline'\r\n              onClick={() => handleArchiveBtn([message.id], [\"INBOX\"])}\r\n            >\r\n              Archive\r\n            </Button>\r\n            <Button\r\n              rightIcon='delete'\r\n              variantColor='blue'\r\n              variant='outline'\r\n              onClick={() => handleTrashBtn(\"me\", message.id)}\r\n            >\r\n              Delete\r\n            </Button>\r\n          </Flex>\r\n\r\n          {/* Mail Container */}\r\n          <Flex\r\n            className='mailContainer'\r\n            flexGrow='2'\r\n            direction='column'\r\n            wrap='no-wrap'\r\n            p={2}\r\n          >\r\n            <Box className='mailHeader' mb={2}>\r\n              <Text fontSize='lg' fontWeight='bold' color='gray.700' mb={1}>\r\n                {getHeader(headers, \"Subject\")}\r\n              </Text>\r\n              <Flex wrap='no-wrap' justify='flex-start'>\r\n                <Avatar\r\n                  name={removeQuote(getHeader(headers, \"From\").split(\"<\")[0])}\r\n                  src='https://bit.ly/tioluwani-kolawole'\r\n                  mr={4}\r\n                />\r\n                <Box w='80%'>\r\n                  <Text fontSize='md' color='gray.700'>\r\n                    {getHeader(headers, \"From\")}\r\n                  </Text>\r\n                  <Text fontSize='sm' color='gray.500'>\r\n                    {formatDate(getHeader(headers, \"Date\"))}\r\n                  </Text>\r\n                </Box>\r\n              </Flex>\r\n              <Text fontSize='sm' color='gray.700' mt={1}>\r\n                {`To: ${getHeader(headers, \"To\")}`}\r\n              </Text>\r\n            </Box>\r\n            <Box className='mailBody' flexGrow='2'>\r\n              <AspectRatioBox ratio={16 / 9} h='100%'>\r\n                <Box as='iframe' id='iframe' title='messageBody'>\r\n                  <p>Your browser does not support iframes.</p>\r\n                </Box>\r\n              </AspectRatioBox>\r\n            </Box>\r\n          </Flex>\r\n        </Fragment>\r\n      )}\r\n    </Flex>\r\n  );\r\n};\r\n\r\nexport default Email;\r\n","import React, { useEffect, useState } from \"react\";\r\n\r\nimport MailboxList from \"./Components/MailboxList/MailboxList\";\r\nimport EmailList from \"./Components/EmailList/EmailList\";\r\nimport Email from \"./Components/Email/Email\";\r\n\r\nimport { ThemeProvider, CSSReset, Button, Flex } from \"@chakra-ui/core\";\r\nimport { FcGoogle } from \"react-icons/fc\";\r\n\r\nexport const EmailContext = React.createContext();\r\n\r\nconst App = () => {\r\n  // const [labels, setlabels] = useState([]); // Todo - sort labels dynamically\r\n  const [currentLabel, setCurrentLabel] = useState(\"INBOX\");\r\n  const [message, setMessage] = useState({});\r\n  const [messages, setMessages] = useState([]);\r\n  const [hasMoreMessages, setHasMoreMessages] = useState(true);\r\n  const [nextPageToken, setNextPageToken] = useState(\"\");\r\n  const [isAuthorize, setIsAuthorize] = useState(false);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    window.gapi.load(\"client:auth2\", {\r\n      callback: () => {\r\n        // Handle gapi.client initialization.\r\n        window.gapi.client.setApiKey(process.env.REACT_APP_API_KEY);\r\n        window.gapi.auth.authorize(\r\n          {\r\n            client_id: process.env.REACT_APP_CLIENT_ID,\r\n            scope: process.env.REACT_APP_SCOPES,\r\n            immediate: true,\r\n          },\r\n          handleAuthResult\r\n        );\r\n      },\r\n      onerror: function () {\r\n        // Handle loading error.\r\n        console.log(\"gapi.client failed to load!\");\r\n      },\r\n      timeout: 5000, // 5 seconds.\r\n      ontimeout: function () {\r\n        // Handle timeout.\r\n        console.log(\"gapi.client could not load in a timely manner!\");\r\n      },\r\n    });\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  const handleAuthResult = (authResult) => {\r\n    if (authResult && !authResult.error) {\r\n      console.log(\"Sign-in successful\");\r\n      setIsAuthorize(true);\r\n      loadClient();\r\n    } else {\r\n      console.error(\"handleAuthResult...\");\r\n      console.error(authResult);\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleAuthClick = () => {\r\n    setLoading(true);\r\n    return window.gapi.auth.authorize(\r\n      {\r\n        client_id: process.env.REACT_APP_CLIENT_ID,\r\n        scope: process.env.REACT_APP_SCOPES,\r\n        immediate: false,\r\n      },\r\n      handleAuthResult\r\n    );\r\n  };\r\n\r\n  const loadClient = () => {\r\n    return window.gapi.client.load(\"gmail\", \"v1\").then(\r\n      (res) => {\r\n        console.log(\"gapi client loaded for API\");\r\n        getMessages();\r\n      },\r\n      (err) => {\r\n        console.error(\"Error loading window.gapi client for API\", err);\r\n      }\r\n    );\r\n  };\r\n\r\n  // ----------- Functions to Get Data from Gmail Api ------------\r\n  const getMessages = (labelIds = currentLabel) => {\r\n    // Get List of 20 message's Id\r\n    window.gapi.client.gmail.users.messages\r\n      .list({\r\n        userId: \"me\",\r\n        labelIds: labelIds,\r\n        maxResults: 20,\r\n      })\r\n      .then((resp) => {\r\n        // Empty previous messages\r\n        setMessages([]);\r\n\r\n        // Set NextPageToken\r\n        if (resp.result.nextPageToken) {\r\n          setNextPageToken(resp.result.nextPageToken);\r\n          setHasMoreMessages(true);\r\n        } else {\r\n          setNextPageToken(\"\");\r\n          setHasMoreMessages(false);\r\n        }\r\n\r\n        // Get Next Pages Messages Id\r\n        // loadMoreMessages();\r\n\r\n        // Send Id list to getMessagesData to get Message Data foreach Id\r\n        getMessagesData(resp);\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n\r\n    // request.execute(getMessagesData);\r\n  };\r\n\r\n  // To Implement Later\r\n  const loadMoreMessages = (labelIds = currentLabel) => {\r\n    return window.gapi.client.gmail.users.messages\r\n      .list({\r\n        userId: \"me\",\r\n        labelIds: labelIds,\r\n        maxResults: 20,\r\n        pageToken: nextPageToken,\r\n      })\r\n      .then((resp) => {\r\n        if (resp.result.nextPageToken) {\r\n          setNextPageToken(resp.result.nextPageToken);\r\n          setHasMoreMessages(true);\r\n        } else {\r\n          setNextPageToken(\"\");\r\n          setHasMoreMessages(false);\r\n        }\r\n\r\n        getMessagesData(resp);\r\n      })\r\n      .catch((err) => {\r\n        console.error(\"Execute error\", err);\r\n      });\r\n  };\r\n\r\n  const getMessagesData = (resp) => {\r\n    // if (!resp.result.resultSizeEstimate) setHasMoreMessages(false);\r\n\r\n    const messages = resp.result.messages ? resp.result.messages : [];\r\n\r\n    messages.forEach((message) => {\r\n      window.gapi.client.gmail.users.messages\r\n        .get({\r\n          userId: \"me\",\r\n          id: message.id,\r\n        })\r\n        .then(\r\n          (resp) => {\r\n            setMessages((messages) => [...messages, resp.result]);\r\n          },\r\n          (err) => {\r\n            console.error(\"getMessagesData error\", err);\r\n          }\r\n        );\r\n    });\r\n  };\r\n\r\n  const getOneMessage = (messageId) => {\r\n    window.gapi.client.gmail.users.messages\r\n      .get({\r\n        userId: \"me\",\r\n        id: messageId,\r\n      })\r\n      .then(\r\n        (resp) => {\r\n          setMessage(resp.result);\r\n        },\r\n        (err) => {\r\n          console.error(\"getMessage error\", err);\r\n        }\r\n      );\r\n  };\r\n\r\n  return (\r\n    <EmailContext.Provider\r\n      value={{\r\n        messages,\r\n        message,\r\n        getMessages,\r\n        getOneMessage,\r\n        setCurrentLabel,\r\n        hasMoreMessages,\r\n        loadMoreMessages,\r\n      }}\r\n    >\r\n      <ThemeProvider>\r\n        <CSSReset />\r\n        {isAuthorize ? (\r\n          <Main />\r\n        ) : (\r\n          <SignIn loading={loading} handleAuthClick={handleAuthClick} />\r\n        )}\r\n      </ThemeProvider>\r\n    </EmailContext.Provider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n\r\nconst SignIn = ({ handleAuthClick, loading }) => (\r\n  <Flex h='100vh' justify='center' alignItems='center' bg='#e5f4f1'>\r\n    <Button\r\n      isLoading={loading}\r\n      // loadingText='Loading...'\r\n      leftIcon={FcGoogle}\r\n      height='50px'\r\n      variantColor='blue'\r\n      variant='outline'\r\n      backgroundColor='white'\r\n      onClick={handleAuthClick}\r\n    >\r\n      Sign in with Google\r\n    </Button>\r\n  </Flex>\r\n);\r\n\r\nconst Main = () => (\r\n  <Flex\r\n    h='100vh'\r\n    minH='600px'\r\n    justify='space-arround'\r\n    wrap='no-wrap'\r\n    p='1em'\r\n    bg='#e5f4f1'\r\n    color='white'\r\n  >\r\n    <MailboxList />\r\n    <EmailList />\r\n    <Email />\r\n  </Flex>\r\n);\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n"],"sourceRoot":""}